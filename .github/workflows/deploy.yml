name: Deploy VOC Platform

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - test
        - prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
        
    - name: Set up environment file
      run: |
        cat << EOF > .env.${{ github.event.inputs.environment || 'dev' }}
        # Tenant Configuration
        TENANT_ID=${{ secrets.TENANT_ID }}
        TENANT_NAME=${{ secrets.TENANT_NAME }}
        
        # Astra DB Configuration
        ASTRA_DB_ID=${{ secrets.ASTRA_DB_ID }}
        ASTRA_DB_REGION=${{ secrets.ASTRA_DB_REGION }}
        ASTRA_TOKEN=${{ secrets.ASTRA_TOKEN }}
        ASTRA_API_ENDPOINT=${{ secrets.ASTRA_API_ENDPOINT }}
        ASTRA_KEYSPACE=${{ secrets.ASTRA_KEYSPACE }}
        
        # Astra Streaming Configuration
        ASTRA_STREAMING_TENANT=${{ secrets.ASTRA_STREAMING_TENANT }}
        ASTRA_STREAMING_NAMESPACE=${{ secrets.ASTRA_STREAMING_NAMESPACE }}
        ASTRA_STREAMING_BROKER_URL=${{ secrets.ASTRA_STREAMING_BROKER_URL }}
        ASTRA_STREAMING_TOKEN=${{ secrets.ASTRA_STREAMING_TOKEN }}
        
        # OpenAI Configuration
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        
        # External Services
        DATAFORSEO_USERNAME=${{ secrets.DATAFORSEO_USERNAME }}
        DATAFORSEO_PASSWORD=${{ secrets.DATAFORSEO_PASSWORD }}
        APIFY_API_TOKEN=${{ secrets.APIFY_API_TOKEN }}
        PHANTOMBUSTER_API_KEY=${{ secrets.PHANTOMBUSTER_API_KEY }}
        
        # Observability Configuration
        LANGFUSE_PUBLIC_KEY=${{ secrets.LANGFUSE_PUBLIC_KEY }}
        LANGFUSE_SECRET_KEY=${{ secrets.LANGFUSE_SECRET_KEY }}
        LANGFUSE_PROJECT_ID=${{ secrets.LANGFUSE_PROJECT_ID }}
        LANGFUSE_ORG_ID=${{ secrets.LANGFUSE_ORG_ID }}
        EOF
    
    - name: Deploy infrastructure with Terraform
      working-directory: infrastructure/terraform
      run: |
        terraform init
        terraform apply -auto-approve -var-file=tenant-${{ github.event.inputs.environment || 'dev' }}.tfvars
      
    - name: Deploy containers with Docker Compose
      run: |
        docker-compose --env-file .env.${{ github.event.inputs.environment || 'dev' }} up -d
      
    - name: Verify deployment
      run: |
        echo "Waiting for services to start..."
        sleep 30
        curl -f http://localhost:3000/health || echo "Health check failed"
        docker-compose ps
        
    - name: Send deployment notification
      if: always()
      uses: slackapi/slack-github-action@v1.23.0
      with:
        payload: |
          {
            "text": "Deployment to ${{ github.event.inputs.environment || 'dev' }} ${{ job.status }}.",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Deployment to ${{ github.event.inputs.environment || 'dev' }} ${{ job.status }}*\n${{ github.repository }} - ${{ github.ref_name }}"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
